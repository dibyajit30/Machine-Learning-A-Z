print("Hello world")
q()
v1 = 5
v2 <- 6.5
"abc" -> v3
print(v2)
cat(v1," ",v2," ",v3)
cat(v1,v2,v3)
print(Is())
print(ls())
q()
setwd("C:/Users/Dibyajit Banerjee/Anaconda3/envs/Machine_Learning_A-Z/Machine Learning A-Z/Part 7 - Natural Language Processing/Section 36 - Natural Language Processing")
setwd("C:/Users/Dibyajit Banerjee/Anaconda3/envs/Machine_Learning_A-Z/Machine Learning A-Z/Part 7 - Natural Language Processing/Section 36 - Natural Language Processing")
# Importing the dataset
dataset = read.delim('Resturant_Reviews.tsv', quote = '', stringsAsFactors = FALSE)
setwd("C:/Users/Dibyajit Banerjee/Anaconda3/envs/Machine_Learning_A-Z/Machine Learning A-Z/Part 7 - Natural Language Processing/Section 36 - Natural Language Processing")
dataset = read.delim('Resturant_Reviews.tsv', quote = '', stringsAsFactors = FALSE)
dataset = read.delim('Restaurant_Reviews.tsv', quote = '', stringsAsFactors = FALSE)
View(dataset)
install.packages('tm')
library(tm)
install.packages('tm')
library(tm)
corpus = VCorpus(VectorSource(dataset$Review))
corpus = tm_map(corpus, content_transformer(tolower))
corpus = tm_map(corpus, removeNumbers)
corpus = tm_map(corpus, removePunctuation)
View(corpus)
View(corpus)
install.packages('SnowballC')
library(SnowballC)
corpus = tm_map(corpus, removeWords, stopwords)
corpus = tm_map(corpus, removeWords, stopwords())
corpus = tm_map(corpus, stemDocument)
corpus = tm_map(corpus, stripWhitespace)
dtm = DocumentTermMatrix(corpus)
View(dtm)
dtm = removeSparseTerms(dtm, sparse = 0.99)
dtm
dataset = as.data.frame(as.matrix(dtm))
View(dataset)
dataset_org = read.delim('Restaurant_Reviews.tsv', quote = '', stringsAsFactors = FALSE)
dataset$Liked = dataset_org$Liked
# Splitting the dataset into the Training set and Test set
# install.packages('caTools')
library(caTools)
set.seed(123)
split = sample.split(dataset$Liked, SplitRatio = 0.8)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
# Fitting Random Forest Classification to the Training set
# install.packages('randomForest')
library(randomForest)
classifier = randomForest(x = training_set[-692],
y = training_set$Liked,
ntree = 10)
# Predicting the Test set results
y_pred = predict(classifier, newdata = test_set[-692])
# Making the Confusion Matrix
cm = table(test_set[, 692], y_pred)
dataset$Liked = dataset_org$Liked
library(caTools)
set.seed(123)
split = sample.split(dataset$Liked, SplitRatio = 0.8)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
# Fitting Random Forest Classification to the Training set
# install.packages('randomForest')
library(randomForest)
classifier = randomForest(x = training_set[-692],
y = training_set$Liked,
ntree = 10)
# Predicting the Test set results
y_pred = predict(classifier, newdata = test_set[-692])
# Making the Confusion Matrix
cm = table(test_set[, 692], y_pred)
View(training_set)
classifier = randomForest(x = training_set[-97],
y = training_set$Liked,
ntree = 10)
# Predicting the Test set results
y_pred = predict(classifier, newdata = test_set[-97])
# Making the Confusion Matrix
cm = table(test_set[, 692], y_pred)
classifier = randomForest(x = training_set[-97],
y = training_set$Liked,
ntree = 10)
# Predicting the Test set results
y_pred = predict(classifier, newdata = test_set[-97])
# Making the Confusion Matrix
cm = table(test_set[, 97], y_pred)
cm
cm = table(test_set[, 96], y_pred)
cm
# Importing the dataset
dataset_original = read.delim('Restaurant_Reviews.tsv', quote = '', stringsAsFactors = FALSE)
# Cleaning the texts
# install.packages('tm')
# install.packages('SnowballC')
library(tm)
library(SnowballC)
corpus = VCorpus(VectorSource(dataset_original$Review))
corpus = tm_map(corpus, content_transformer(tolower))
corpus = tm_map(corpus, removeNumbers)
corpus = tm_map(corpus, removePunctuation)
corpus = tm_map(corpus, removeWords, stopwords())
corpus = tm_map(corpus, stemDocument)
corpus = tm_map(corpus, stripWhitespace)
# Creating the Bag of Words model
dtm = DocumentTermMatrix(corpus)
dtm = removeSparseTerms(dtm, 0.999)
dataset = as.data.frame(as.matrix(dtm))
dataset$Liked = dataset_original$Liked
# Importing the dataset
dataset = read.csv('Social_Network_Ads.csv')
dataset = dataset[3:5]
# Encoding the target feature as factor
dataset$Liked = factor(dataset$Liked, levels = c(0, 1))
# Splitting the dataset into the Training set and Test set
# install.packages('caTools')
library(caTools)
set.seed(123)
split = sample.split(dataset$Liked, SplitRatio = 0.8)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
# Fitting Random Forest Classification to the Training set
# install.packages('randomForest')
library(randomForest)
classifier = randomForest(x = training_set[-692],
y = training_set$Liked,
ntree = 10)
# Predicting the Test set results
y_pred = predict(classifier, newdata = test_set[-692])
# Making the Confusion Matrix
cm = table(test_set[, 692], y_pred)
set.seed(123)
split = sample.split(dataset$Liked, SplitRatio = 0.8)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
# Fitting Random Forest Classification to the Training set
# install.packages('randomForest')
library(randomForest)
classifier = randomForest(x = training_set[-96],
y = training_set$Liked,
ntree = 10)
# Predicting the Test set results
y_pred = predict(classifier, newdata = test_set[-96])
# Making the Confusion Matrix
cm = table(test_set[, 96], y_pred)
dataset_org = read.delim('Restaurant_Reviews.tsv', quote = '', stringsAsFactors = FALSE)
# Cleaning the texts
#install.packages('tm')
install.packages('SnowballC')
library(SnowballC)
library(tm)
corpus = VCorpus(VectorSource(dataset_org$Review))
corpus = tm_map(corpus, content_transformer(tolower))
corpus = tm_map(corpus, removeNumbers)
corpus = tm_map(corpus, removePunctuation)
corpus = tm_map(corpus, removeWords, stopwords())
corpus = tm_map(corpus, stemDocument)
corpus = tm_map(corpus, stripWhitespace)
# Creating the bag of words
dtm = DocumentTermMatrix(corpus)
dtm = removeSparseTerms(dtm, sparse = 0.99)
dataset = as.data.frame(as.matrix(dtm))
dataset$Liked = dataset_org$Liked
# Splitting the dataset into the Training set and Test set
# install.packages('caTools')
library(caTools)
set.seed(123)
split = sample.split(dataset$Liked, SplitRatio = 0.8)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
# Fitting Random Forest Classification to the Training set
# install.packages('randomForest')
library(randomForest)
classifier = randomForest(x = training_set[-96],
y = training_set$Liked,
ntree = 10)
# Predicting the Test set results
y_pred = predict(classifier, newdata = test_set[-96])
# Making the Confusion Matrix
cm = table(test_set[, 96], y_pred)
install.packages("SnowballC")
cm
classifier = randomForest(x = training_set[-97],
y = training_set$Liked,
ntree = 10)
# Predicting the Test set results
y_pred = predict(classifier, newdata = test_set[-97])
# Making the Confusion Matrix
cm = table(test_set[, 96], y_pred)
library(randomForest)
classifier = randomForest(x = training_set[-97],
y = training_set$Liked,
ntree = 10)
# Predicting the Test set results
y_pred = predict(classifier, newdata = test_set[-97])
# Making the Confusion Matrix
cm = table(test_set[, 96], y_pred)
cm = table(test_set[, 97], y_pred)
cm
