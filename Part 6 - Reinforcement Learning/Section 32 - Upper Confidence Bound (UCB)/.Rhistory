print("Hello world")
q()
v1 = 5
v2 <- 6.5
"abc" -> v3
print(v2)
cat(v1," ",v2," ",v3)
cat(v1,v2,v3)
print(Is())
print(ls())
q()
setwd("C:/Users/Dibyajit Banerjee/Anaconda3/envs/Machine_Learning_A-Z/Machine Learning A-Z/Part 6 - Reinforcement Learning/Section 32 - Upper Confidence Bound (UCB)")
setwd("C:/Users/Dibyajit Banerjee/Anaconda3/envs/Machine_Learning_A-Z/Machine Learning A-Z/Part 6 - Reinforcement Learning/Section 32 - Upper Confidence Bound (UCB)")
# Importing the dataset
dataset = read.csv('Ads_CTR_Optimisation.csv')
N = 10000
d = 10
ads_selected = integer(0)
numbers_of_selections = integer(d)
sums_of_rewards = integer(d)
total_reward = 0
for (i in 1:N) {
max_upper_bound = 0
ad = 0
for (j in 1:d){
if(numbers_of_selections[j] > 0){
average_reward = sums_of_rewards[i] / numbers_of_selections[i]
delta_i = sqrt(3/2 * log(n) / numbers_of_selections[i])
upper_bound = average_reward + delta_i
}
else{
upper_bound = 1e400
}
if(upper_bound > max_upper_bound){
max_upper_bound = upper_bound
ad = i
}
ads_selected = append(ads_selected, ad)
numbers_of_selections[ad] = numbers_of_selections[ad] + 1
reward = dataset[n, ad]
sums_of_rewards[ad] = sums_of_rewards[ad] + reward
total_reward = total_reward + reward
}
}
for (i in 1:N) {
max_upper_bound = 0
ad = 0
for (j in 1:d){
if(numbers_of_selections[j] > 0){
average_reward = sums_of_rewards[j] / numbers_of_selections[j]
delta_i = sqrt(3/2 * log(i) / numbers_of_selections[j])
upper_bound = average_reward + delta_i
}
else{
upper_bound = 1e400
}
if(upper_bound > max_upper_bound){
max_upper_bound = upper_bound
ad = i
}
ads_selected = append(ads_selected, ad)
numbers_of_selections[ad] = numbers_of_selections[ad] + 1
reward = dataset[n, ad]
sums_of_rewards[ad] = sums_of_rewards[ad] + reward
total_reward = total_reward + reward
}
}
for (i in 1:N) {
max_upper_bound = 0
ad = 0
for (j in 1:d){
if(numbers_of_selections[j] > 0){
average_reward = sums_of_rewards[j] / numbers_of_selections[j]
delta_i = sqrt(3/2 * log(i) / numbers_of_selections[j])
upper_bound = average_reward + delta_i
}
else{
upper_bound = 1e400
}
if(upper_bound > max_upper_bound){
max_upper_bound = upper_bound
ad = i
}
ads_selected = append(ads_selected, ad)
numbers_of_selections[ad] = numbers_of_selections[ad] + 1
reward = dataset[i, ad]
sums_of_rewards[ad] = sums_of_rewards[ad] + reward
total_reward = total_reward + reward
}
}
